package main

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestStrip_updateDNRGB(t *testing.T) {
	type args struct {
		msg []byte
	}
	tests := []struct {
		name     string
		args     args
		wantLeds []uint32
	}{
		{
			name: "DNRGB: index 0",
			args: args{
				msg: []byte(
					"\x04\xff\x00\x00" +
					"\xff\x00\x00" +
					"\x00\xff\x00" +
					"\x00\x00\xff",
				),
			},
			wantLeds: []uint32{
				0xff0000,
				0x00ff00,
				0x0000ff,
				0x000000,
			},
		}, {
			name: "DNRGB: index 1",
			args: args{
				msg: []byte(
					"\x04\xff\x00\x01" +
					"\xff\x00\x00" +
					"\x00\xff\x00" +
					"\x00\x00\xff",
				),
			},
			wantLeds: []uint32{
				0x000000,
				0xff0000,
				0x00ff00,
				0x0000ff,
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			s := &Strip{
				ledCount:      4,
				ledBrightness: 255,
			}
			checkError(s.setup())
			checkError(s.Init())

			s.updateDNRGB(tt.args.msg)
			assert.Equal(t, tt.wantLeds, s.Leds(0))
		})
	}
}

var benchmarkStrip = Strip{
	ledCount: 62,
	ledBrightness: 255,
}

func BenchmarkStrip_updateDNRGB_FullMsg(b *testing.B) {
	msg := []byte("\x04\xff\x00\x00\xf1\xf1\xf1\xf2\xf2\xf2\xf3\xf3\xf3\xf1\xf1\xf1\xf2\xf2\xf2\xf3\xf3\xf3\xf1\xf1\xf1\xf2\xf2\xf2\xf3\xf3\xf3\xf1\xf1\xf1\xf2\xf2\xf2\xf3\xf3\xf3\xf1\xf1\xf1\xf2\xf2\xf2\xf3\xf3\xf3\xf1\xf1\xf1\xf2\xf2\xf2\xf3\xf3\xf3\xf1\xf1\xf1\xf2\xf2\xf2\xf3\xf3\xf3\xf1\xf1\xf1\xf2\xf2\xf2\xf3\xf3\xf3\xf1\xf1\xf1\xf2\xf2\xf2\xf3\xf3\xf3\xf1\xf1\xf1\xf2\xf2\xf2\xf3\xf3\xf3\xf1\xf1\xf1\xf2\xf2\xf2\xf3\xf3\xf3\xf1\xf1\xf1\xf2\xf2\xf2\xf3\xf3\xf3\xf1\xf1\xf1\xf2\xf2\xf2\xf3\xf3\xf3\xf1\xf1\xf1\xf2\xf2\xf2\xf3\xf3\xf3\xf1\xf1\xf1\xf2\xf2\xf2\xf3\xf3\xf3\xf1\xf1\xf1\xf2\xf2\xf2\xf3\xf3\xf3\xf1\xf1\xf1\xf2\xf2\xf2\xf3\xf3\xf3\xf1\xf1\xf1\xf2\xf2\xf2\xf3\xf3\xf3\xf1\xf1\xf1\xf2\xf2\xf2\xf3\xf3\xf3\xf1\xf1\xf1\xf2\xf2\xf2\xf3\xf3\xf3\xf1\xf1\xf1\xf2\xf2\xf2")

	checkError(benchmarkStrip.setup())
	checkError(benchmarkStrip.Init())

	for n := 0; n < b.N; n++ {
		benchmarkStrip.updateDNRGB(msg)
	}
}

func BenchmarkStrip_updateDNRGB_PartialMsg(b *testing.B) {
	msg := []byte("\x04\xff\x00\x0f\xf2\xf2\xf2\xf3\xf3\xf3\xf1\xf1\xf1\xf2\xf2\xf2\xf3\xf3\xf3\xf1\xf1\xf1\xf2\xf2\xf2\xf3\xf3\xf3\xf1\xf1\xf1\xf2\xf2\xf2\xf3\xf3\xf3\xf1\xf1\xf1\xf2\xf2\xf2\xf3\xf3\xf3\xf1\xf1\xf1\xf2\xf2\xf2\xf3\xf3\xf3\xf1\xf1\xf1\xf2\xf2\xf2\xf3\xf3\xf3\xf1\xf1\xf1\xf2\xf2\xf2\xf3\xf3\xf3\xf1\xf1\xf1\xf2\xf2\xf2\xf3\xf3\xf3\xf1\xf1\xf1\xf2\xf2\xf2\xf3\xf3\xf3\xf1")
	for n := 0; n < b.N; n++ {
		benchmarkStrip.updateDNRGB(msg)
	}
}
